<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${basePackage}.${projectName}.mapper.${className}Mapper">
<#--
cache – 缓存
cache-ref – 关联其他命名空间的缓存
resultMap – 描述如何从数据库结果集中获取对象
parameterMap – Deprecated! Old-school way to map parameters. Inline parameters are preferred and this element may be removed in the future. Not documented here.
sql – 可被重复引用的sql块
insert – 插入声明的映射
update – 更新声明的映射
delete – 删除声明的映射
select – 查询声明的映射
-->
<#--
自定义缓存实现类：
    <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
    <cache type="com.domain.something.MyCustomCache">
        <property name="cacheFile" value="/tmp/my-custom-cache.tmp"/>
    </cache>
默认缓存实现类：
    <cache/>
    <cache-ref namespace="com.someone.application.data.SomeMapper"/>
    <cache
      eviction="LRU"  # 删除长期未使用对象
      size="1024"
      readOnly="true"/>
-->

    <resultMap id="${className}ResultMap" type="${basePackage}.${projectName}.entity.${className}Bo">
    <#list Columns as column>
        <result column="${column.Code}" jdbcType="${column.JdbcType}" property="${column.CodeCamelFirstLower}" javaType="${column.JavaType}"/>
    </#list>
    </resultMap>
    
    <sql id="default_select_column_sql">
        <#list Columns as column>
            <#noparse>${alias}</#noparse>.${column.Code}<#if column_has_next>, </#if>
        </#list>
    </sql>
    
    <sql id="default_condition_sql">
    <#list Columns as column>
        <#if column.JavaType == "java.sql.Date" || column.JavaType == "java.sql.Timestamp">
            <#if dbType == "oracle">
            <if test='${column.CodeUpper}_BEGINTIME != null and ${column.CodeUpper}_BEGINTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[>=]]> TO_DATE(<#noparse>#{</#noparse>${column.CodeUpper}_BEGINTIME<#noparse>}</#noparse>, 'YYYY-MM-DD HH24:MI:SS')
            </if>
            <if test='${column.CodeUpper}_ENDTIME != null and ${column.CodeUpper}_ENDTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[<=]]> TO_DATE(<#noparse>#{</#noparse>${column.CodeUpper}_ENDTIME<#noparse>}</#noparse>, 'YYYY-MM-DD HH24:MI:SS')
            </if>
            <#elseif dbType == "sqlserver">
            <if test='${column.CodeUpper}_BEGINTIME != null and ${column.CodeUpper}_BEGINTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[>=]]> CONVERT(DATETIME, <#noparse>#{</#noparse>${column.CodeUpper}_BEGINTIME<#noparse>}</#noparse>, 120)
            </if>
            <if test='${column.CodeUpper}_ENDTIME != null and ${column.CodeUpper}_ENDTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[<=]]> CONVERT(DATETIME, <#noparse>#{</#noparse>${column.CodeUpper}_ENDTIME<#noparse>}</#noparse>, 120)
            </if>
            <#elseif dbType == "mysql">
            <if test='${column.CodeUpper}_BEGINTIME != null and ${column.CodeUpper}_BEGINTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[>=]]> STR_TO_DATE(<#noparse>#{</#noparse>${column.CodeUpper}_BEGINTIME<#noparse>}</#noparse>, '%Y-%m-%d %T')
            </if>
            <if test='${column.CodeUpper}_ENDTIME != null and ${column.CodeUpper}_ENDTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[<=]]> STR_TO_DATE(<#noparse>#{</#noparse>${column.CodeUpper}_ENDTIME<#noparse>}</#noparse>, '%Y-%m-%d %T')
            </if>
            <#elseif dbType == "postgresql">
            <if test='${column.CodeUpper}_BEGINTIME != null and ${column.CodeUpper}_BEGINTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[>=]]> to_timestamp(<#noparse>#{</#noparse>${column.CodeUpper}_BEGINTIME<#noparse>}</#noparse>, 'yyyy-MM-dd hh24:mi:ss')
            </if>
            <if test='${column.CodeUpper}_ENDTIME != null and ${column.CodeUpper}_ENDTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[<=]]> to_timestamp(<#noparse>#{</#noparse>${column.CodeUpper}_ENDTIME<#noparse>}</#noparse>, 'yyyy-MM-dd hh24:mi:ss')
            </if>
            </#if>
        <#elseif column.JavaType == "java.sql.Time">
            <#if dbType == "oracle">
            <if test='${column.CodeUpper}_BEGINTIME != null and ${column.CodeUpper}_BEGINTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[>=]]> TO_DATE(<#noparse>#{</#noparse>${column.CodeUpper}_BEGINTIME<#noparse>}</#noparse>, 'HH24:MI:SS')
            </if>
            <if test='${column.CodeUpper}_ENDTIME != null and ${column.CodeUpper}_ENDTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[<=]]> TO_DATE(<#noparse>#{</#noparse>${column.CodeUpper}_ENDTIME<#noparse>}</#noparse>, 'HH24:MI:SS')
            </if>
            <#elseif dbType == "sqlserver">
            <if test='${column.CodeUpper}_BEGINTIME != null and ${column.CodeUpper}_BEGINTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[>=]]> CONVERT(DATETIME, <#noparse>#{</#noparse>${column.CodeUpper}_BEGINTIME<#noparse>}</#noparse>, 24)
            </if>
            <if test='${column.CodeUpper}_ENDTIME != null and ${column.CodeUpper}_ENDTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[<=]]> CONVERT(DATETIME, <#noparse>#{</#noparse>${column.CodeUpper}_ENDTIME<#noparse>}</#noparse>, 24)
            </if>
            <#elseif dbType == "mysql">
            <if test='${column.CodeUpper}_BEGINTIME != null and ${column.CodeUpper}_BEGINTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[>=]]> STR_TO_DATE(<#noparse>#{</#noparse>${column.CodeUpper}_BEGINTIME<#noparse>}</#noparse>, '%T')
            </if>
            <if test='${column.CodeUpper}_ENDTIME != null and ${column.CodeUpper}_ENDTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[<=]]> STR_TO_DATE(<#noparse>#{</#noparse>${column.CodeUpper}_ENDTIME<#noparse>}</#noparse>, '%T')
            </if>
            <#elseif dbType == "postgresql">
            <if test='${column.CodeUpper}_BEGINTIME != null and ${column.CodeUpper}_BEGINTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[>=]]> to_timestamp(<#noparse>#{</#noparse>${column.CodeUpper}_BEGINTIME<#noparse>}</#noparse>, 'hh24:mi:ss')
            </if>
            <if test='${column.CodeUpper}_ENDTIME != null and ${column.CodeUpper}_ENDTIME != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} <![CDATA[<=]]> to_timestamp(<#noparse>#{</#noparse>${column.CodeUpper}_ENDTIME<#noparse>}</#noparse>, 'hh24:mi:ss')
            </if>
            </#if>
        <#elseif column.JavaType == "java.lang.String">
            <if test='${column.CodeUpper} != null and ${column.CodeUpper} != ""'>
                AND <#noparse>${alias}</#noparse>.${column.Code} = <#noparse>#{</#noparse>${column.CodeUpper}<#noparse>}</#noparse>
            </if>
            <if test='${column.CodeUpper}_LIKE != null and ${column.CodeUpper}_LIKE != ""'>
                <bind name="_${column.CodeUpper}_LIKE" value="'%' + ${column.CodeUpper}_LIKE + '%'" />
                AND <#noparse>${alias}</#noparse>.${column.Code} LIKE <#noparse>#{</#noparse>_${column.CodeUpper}_LIKE<#noparse>}</#noparse>
            </if>
        <#else>
            <if test='${column.CodeUpper} != null'>
                AND <#noparse>${alias}</#noparse>.${column.Code} = <#noparse>#{</#noparse>${column.CodeUpper}<#noparse>}</#noparse>
            </if>
        </#if>
    </#list>
    </sql>

    <sql id="default_where_sql">
        <where>
            <include refid="default_condition_sql"/>
        </where>
    </sql>
    
<!--// =================================
    // 插入
    // =================================-->
    
    <!--全部字段-->
<!--    <insert id="insert" parameterType="map">-->
<!--        INSERT INTO ${Code} (-->
<!--        <#list Columns as column>-->
<!--            ${column.Code}<#sep>, </#sep>-->
<!--        </#list>-->
<!--        )-->
<!--        VALUES (-->
<!--    <#list Columns as column>-->
<!--        <#if column.JavaType == "java.sql.Date" || column.JavaType == "java.sql.Timestamp">-->
<!--            <#noparse>#{</#noparse>${column.CodeUpper}, jdbcType=${column.JdbcType}<#noparse>}</#noparse><#sep>, </#sep>-->
<!--        <#elseif column.JavaType == "java.sql.Time">-->
<!--            <#noparse>#{</#noparse>${column.CodeUpper}, jdbcType=${column.JdbcType}<#noparse>}</#noparse><#sep>, </#sep>-->
<!--        <#else>-->
<!--            <#noparse>#{</#noparse>${column.CodeUpper}<#noparse>}</#noparse><#sep>, </#sep>-->
<!--        </#if>-->
<!--    </#list>-->
<!--        )-->
<!--    </insert>-->

    <insert id="insert" parameterType="map">
        INSERT INTO ${Code} (
        <foreach collection="map" index="key" item="val" open="" separator="," close="">
            <#noparse>${key}</#noparse>
        </foreach>
        )
        VALUES (
        <foreach collection="map" index="key" item="val" open="" separator="," close="">
            <#noparse>#{val}</#noparse>
        </foreach>
        )
    </insert>

    <insert id="insertDynamic" parameterType="map">
        INSERT INTO <#noparse>${table_name}</#noparse> (
        <foreach collection="map" index="key" item="val" open="" separator="," close="">
            <#noparse>${key}</#noparse>
        </foreach>
        )
        VALUES (
        <foreach collection="map" index="key" item="val" open="" separator="," close="">
            <#noparse>#{val}</#noparse>
        </foreach>
        )
    </insert>

<!--// =================================
    // 删除
    // =================================-->

    <!--oracle-->
<!--    <delete id="delete" parameterType="map">-->
<!--        DELETE FROM ${Code} M-->
<!--        <include refid="default_where_sql">-->
<!--            <property name="alias" value="M"/>-->
<!--        </include>-->
<!--    </delete>-->

    <!--mysql-->
    <delete id="delete" parameterType="map">
        DELETE M FROM TEST AS M
        <include refid="default_where_sql">
            <property name="alias" value="M"/>
        </include>
    </delete>
    
<!--// =================================
    // 更新
    // =================================-->
    
    <!--更新的条件语句在 DAO 层添加 UP 前缀-->
    <sql id="update_condition_sql">
    <#list Columns as column>
        <if test='UP_${column.CodeUpper} != null'>
            AND <#noparse>${alias}</#noparse>.${column.Code} = <#noparse>#{</#noparse>UP_${column.CodeUpper}<#noparse>}</#noparse>
        </if>
    </#list>
    </sql>
    
    <#-- https://mybatis.org/mybatis-3/sqlmap-xml.html -->
    <#-- Parameters -->
    <#-- #{height, javaType=double, jdbcType=NUMERIC, numericScale=2} -->
    <update id="update" parameterType="map">
        UPDATE ${Code} M
        <trim prefix="SET" suffixOverrides=",">
    <#list Columns as column>
        <#if column.JavaType == "java.sql.Date" || column.JavaType == "java.sql.Timestamp">
            <if test='${column.Code} != null'>
                ${column.Code} = <#noparse>#{</#noparse>${column.CodeUpper}, jdbcType=${column.JdbcType}<#noparse>}</#noparse>
            </if>
        <#elseif column.JavaType == "java.sql.Time">
            <if test='${column.Code} != null'>
                ${column.Code} = <#noparse>#{</#noparse>${column.CodeUpper}, jdbcType=${column.JdbcType}<#noparse>}</#noparse>
            </if>
        <#else>
            <if test='${column.Code} != null'>
                AND <#noparse>${alias}</#noparse>.${column.Code} = <#noparse>#{</#noparse>${column.CodeUpper}<#noparse>}</#noparse>
            </if>
        </#if>
    </#list>
        </trim>
        <include refid="update_condition_sql">
            <property name="alias" value="M"/>
        </include>
    </update>

<!--// =================================
    // 查询
    // =================================-->
    
    <select id="count" parameterType="map" resultMap="long">
        SELECT COUNT(0) FROM ${Code} M
        <include refid="default_where_sql">
            <property name="alias" value="M"/>
        </include>
    </select>

    <select id="select" parameterType="map" resultMap="${className}ResultMap">
        SELECT 
        <include refid="default_select_column_sql">
            <property name="alias" value="M"/>
        </include>
        FROM ${Code} M
        <include refid="default_condition_sql">
            <property name="alias" value="M"/>
        </include>
    </select>
    
<#if HasPrimaryKey == '1'>
    <sql id="sql_where_primary">
        WHERE
    <#list Columns?filter(x -> x.PrimaryKey == "1") as column>
         <#if column.JavaType == "java.lang.String">
            <#noparse>${alias}</#noparse>.${column.Code} = <#noparse>#{</#noparse>${column.CodeUpper}<#noparse>}</#noparse>
         <#else>
            <#noparse>${alias}</#noparse>.${column.Code} = <#noparse>#{</#noparse>${column.CodeUpper}<#noparse>}</#noparse>
         </#if><#sep>AND </#sep>
    </#list>
    </sql>

</#if>
<#if HasPrimaryKey == '1'>
    <select id="select_primary" parameterType="map" resultMap="${className}ResultMap">
        SELECT 
        <include refid="default_select_column_sql">
            <property name="alias" value="M"/>
        </include>
           FROM ${Code} M
        <include refid="sql_where_primary">
            <property name="alias" value="M"/>
        </include>
    </select>

</#if>
<#-- 存在父级 -->
<#if RefParents?exists>
    <#list RefParents as reference>
    <select id="select_${reference.ParentTable.className}_${reference_index}" parameterType="map" resultMap="${className}ResultMap">
        SELECT 
            <include refid="default_select_column_sql">
                <property name="alias" value="M"/>
            </include>
        FROM ${Code} M
        WHERE
        <#list reference.ArrowColumnList as column>
            <#if column.ArrowTailColumn.JavaType == "java.lang.String">
            M.${column.ArrowTailColumn.Code} = <#noparse>#{</#noparse>${column.ArrowTailColumn.Code}<#noparse>}</#noparse>
            <#else>
            M.${column.ArrowTailColumn.Code} = <#noparse>#{</#noparse>${column.ArrowTailColumn.Code}<#noparse>}</#noparse>
            </#if>
            <#if column_has_next>AND </#if>
        </#list>
    </select>

    </#list>
    
    <#list RefParents as reference>
    <resultMap id="select_ref_${reference.ParentTable.className}_${reference_index}_result" type="${basePackage}.${projectName}.entity.${className}">
        <#list Columns as column>
        <result column="T2_${column.Code}" jdbcType="${column.JdbcType}" property="${column.CodeCamelFirstLower}"/>
        </#list>
        <association property="${reference.ParentTable.classNameVariable}" javaType="${basePackage}.${projectName}.entity.${reference.ParentTable.className}">
            <#list reference.ParentTable.Columns as column>
            <result column="T1_${column.Code}" jdbcType="${column.JdbcType}" property="${column.CodeCamelFirstLower}"/>
            </#list>
        </association>
    </resultMap>
    
    <select id="select_ref_${reference.ParentTable.className}_${reference_index}" parameterType="map" resultMap="select_ref_${reference.ParentTable.className}_${reference_index}_result">
        SELECT 
        <#list reference.ParentTable.Columns as column>
            T1.${column.Code} as T1_${column.Code},
        </#list>
        <#list Columns as column>
            T2.${column.Code} as T2_${column.Code}<#if column_has_next>, </#if>
        </#list>
        FROM 
            ${reference.ParentTable.Code} AS T1
                RIGHT JOIN 
            ${Code} AS T2 ON <#list reference.ArrowColumnList as arrowColumn>T2.${arrowColumn.ArrowTailColumn.Code} = T1.${arrowColumn.ArrowHeadColumn.Code}<#if arrowColumn_has_next>, </#if> </#list>
        <include refid="default_where_sql">
            <property name="alias" value="T2"/>
        </include>
    </select>

    </#list>
</#if>
<#-- 存在子级 -->
<#if RefChildren?exists>
    <#list RefChildren as reference>
    <resultMap id="select_ref_${reference.ChildTable.className}_many${reference_index}_result" type="${basePackage}.${projectName}.entity.${className}">
        <#list Columns as column>
        <result column="T2_${column.Code}" jdbcType="${column.JdbcType}" property="${column.CodeCamelFirstLower}"/>
        </#list>
        <collection property="${reference.ChildTable.classNameVariable}List" ofType="${basePackage}.${projectName}.entity.${reference.ChildTable.className}">
            <#list reference.ChildTable.Columns as column>
            <result column="T1_${column.Code}" jdbcType="${column.JdbcType}" property="${column.CodeCamelFirstLower}"/>
            </#list>
        </collection>
    </resultMap>

    <select id="select_ref_${reference.ChildTable.className}_many${reference_index}" parameterType="map" resultMap="select_ref_${reference.ChildTable.className}_many${reference_index}_result">
        SELECT 
        <#list reference.ChildTable.Columns as column>
            T1.${column.Code} as T1_${column.Code},
        </#list>
        <#list Columns as column>
            T2.${column.Code} as T2_${column.Code}<#if column_has_next>, </#if>
        </#list>
        FROM 
            ${reference.ChildTable.Code} AS T1
                RIGHT JOIN 
            ${Code} AS T2 ON <#list reference.ArrowColumnList as arrowColumn>T1.${arrowColumn.ArrowTailColumn.Code} = T2.${arrowColumn.ArrowHeadColumn.Code}<#if arrowColumn_has_next>, </#if> </#list>
        <include refid="default_where_sql">
            <property name="alias" value="T2"/>
        </include>
    </select>

    </#list>
</#if>
<#--
-- 调用函数 - mssql
<select id="call_func" parameterType="map" resultType="string">
    SELECT dbo.function_name(#{xxx})
</select>

-- 调用函数 - oracle
<select id="call_func" parameterType="map" resultType="string">
    SELECT dbo.function_name(#{xxx}) from dual
</select>

-- 调用函数
<select id="call_func" parameterType="int" resultType="int", statementType = "CALLABLE">
    {
        call dbo.func_name(
            #{a, mode = IN, jdbcType=java.lang.Integer},
            #{a, mode = OUT, jdbcType=java.lang.Integer}
        )
    }
</select>

<select id="select_blog" resultSets="blogs,authors" resultMap="blogResult" statementType="CALLABLE">
    {
        call getBlogsAndAuthors(
            #{id, jdbcType=INTEGER, mode=IN}
        )
    }
</select>
-->
</mapper>